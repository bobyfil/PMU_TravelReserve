// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TravelReserveCL.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TravelReserveCL.Protobuf {

  /// <summary>Holder for reflection information generated from TravelReserveCL.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class TravelReserveCLReflection {

    #region Descriptor
    /// <summary>File descriptor for TravelReserveCL.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TravelReserveCLReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVUcmF2ZWxSZXNlcnZlQ0wucHJvdG8SGFRyYXZlbFJlc2VydmVDTC5wcm90",
            "b2J1ZiLWAQoDQnVzEgoKAklkGAEgASgFEgwKBE5hbWUYAiABKAkSEQoJQ29t",
            "cGFueUlkGAMgASgFEgwKBFR5cGUYBCABKAUSMgoHQ29tcGFueRgFIAEoCzIh",
            "LlRyYXZlbFJlc2VydmVDTC5wcm90b2J1Zi5Db21wYW55EjIKB0J1c1R5cGUY",
            "BiABKAsyIS5UcmF2ZWxSZXNlcnZlQ0wucHJvdG9idWYuQnVzVHlwZRIsCgRU",
            "cmlwGAcgAygLMh4uVHJhdmVsUmVzZXJ2ZUNMLnByb3RvYnVmLlRyaXAigwIK",
            "CkJ1c1N0YXRpb24SCgoCSWQYASABKAUSDAoETmFtZRgCIAEoCRIOCgZDaXR5",
            "SWQYAyABKAUSEAoITGF0aXR1ZGUYBCABKAESEgoKTG9uZ3RpdHVkZRgFIAEo",
            "ARIPCgdEZWZhdWx0GAYgASgIEiwKBENpdHkYByABKAsyHi5UcmF2ZWxSZXNl",
            "cnZlQ0wucHJvdG9idWYuQ2l0eRIzCgpSb3V0ZXNGcm9tGAggAygLMh8uVHJh",
            "dmVsUmVzZXJ2ZUNMLnByb3RvYnVmLlJvdXRlEjEKCFJvdXRlc1RvGAkgAygL",
            "Mh8uVHJhdmVsUmVzZXJ2ZUNMLnByb3RvYnVmLlJvdXRlIl4KB0J1c1R5cGUS",
            "CgoCSWQYASABKAUSDAoETmFtZRgCIAEoCRINCgVTZWF0cxgDIAEoBRIqCgNC",
            "dXMYBCADKAsyHS5UcmF2ZWxSZXNlcnZlQ0wucHJvdG9idWYuQnVzIloKBENp",
            "dHkSCgoCSWQYASABKAUSDAoETmFtZRgCIAEoCRI4CgpCdXNTdGF0aW9uGAMg",
            "AygLMiQuVHJhdmVsUmVzZXJ2ZUNMLnByb3RvYnVmLkJ1c1N0YXRpb24iXQoH",
            "Q29tcGFueRIKCgJJZBgBIAEoBRIMCgRuYW1lGAIgASgJEgwKBGxvZ28YAyAB",
            "KAwSKgoDQnVzGAQgAygLMh0uVHJhdmVsUmVzZXJ2ZUNMLnByb3RvYnVmLkJ1",
            "cyKdAgoFUm91dGUSCgoCSWQYASABKAUSDAoERnJvbRgCIAEoBRIKCgJUbxgD",
            "IAEoBRIQCghEaXN0YW5jZRgEIAEoARI8Cg5CdXNTdGF0aW9uRnJvbRgFIAEo",
            "CzIkLlRyYXZlbFJlc2VydmVDTC5wcm90b2J1Zi5CdXNTdGF0aW9uEjoKDEJ1",
            "c1N0YXRpb25UbxgGIAEoCzIkLlRyYXZlbFJlc2VydmVDTC5wcm90b2J1Zi5C",
            "dXNTdGF0aW9uEiwKBFRyaXAYByADKAsyHi5UcmF2ZWxSZXNlcnZlQ0wucHJv",
            "dG9idWYuVHJpcBI0CghVc2VyUGxhbhgIIAMoCzIiLlRyYXZlbFJlc2VydmVD",
            "TC5wcm90b2J1Zi5Vc2VyUGxhbiK9AQoGVGlja2V0EgoKAklkGAEgASgFEg4K",
            "BlRyaXBJZBgCIAEoBRINCgVQcmljZRgDIAEoARIQCghGcm9tRGF0ZRgEIAEo",
            "AxIOCgZUb0RhdGUYBSABKAMSLAoEVHJpcBgGIAEoCzIeLlRyYXZlbFJlc2Vy",
            "dmVDTC5wcm90b2J1Zi5UcmlwEjgKClVzZXJUaWNrZXQYByADKAsyJC5UcmF2",
            "ZWxSZXNlcnZlQ0wucHJvdG9idWYuVXNlclRpY2tldCKaAgoEVHJpcBIKCgJJ",
            "ZBgBIAEoBRIPCgdSb3V0ZUlkGAIgASgFEg0KBUJ1c0lkGAMgASgFEhIKCkF2",
            "YWlsU2VhdHMYBCABKAUSDAoERGF0ZRgFIAEoBRIMCgRUaW1lGAYgASgFEhMK",
            "C0Fycml2YWxEYXRlGAcgASgFEhMKC0Fycml2YWxUaW1lGAggASgFEioKA0J1",
            "cxgJIAEoCzIdLlRyYXZlbFJlc2VydmVDTC5wcm90b2J1Zi5CdXMSLgoFUm91",
            "dGUYCiABKAsyHy5UcmF2ZWxSZXNlcnZlQ0wucHJvdG9idWYuUm91dGUSMAoG",
            "VGlja2V0GAsgAygLMiAuVHJhdmVsUmVzZXJ2ZUNMLnByb3RvYnVmLlRpY2tl",
            "dCK1AQoEVXNlchIKCgJJZBgBIAEoBRINCgVFbWFpbBgCIAEoCRIQCghQYXNz",
            "d29yZBgDIAEoDBIQCghVc2VybmFtZRgEIAEoCRI0CghVc2VyUGxhbhgFIAMo",
            "CzIiLlRyYXZlbFJlc2VydmVDTC5wcm90b2J1Zi5Vc2VyUGxhbhI4CgpVc2Vy",
            "VGlja2V0GAYgAygLMiQuVHJhdmVsUmVzZXJ2ZUNMLnByb3RvYnVmLlVzZXJU",
            "aWNrZXQitwEKCFVzZXJQbGFuEgoKAklkGAEgASgFEg4KBlVzZXJJZBgCIAEo",
            "BRIPCgdSb3V0ZUlkGAMgASgFEhAKCEZyb21EYXRlGAQgASgDEg4KBlRvRGF0",
            "ZRgFIAEoAxIuCgVSb3V0ZRgGIAEoCzIfLlRyYXZlbFJlc2VydmVDTC5wcm90",
            "b2J1Zi5Sb3V0ZRIsCgRVc2VyGAcgASgLMh4uVHJhdmVsUmVzZXJ2ZUNMLnBy",
            "b3RvYnVmLlVzZXIiqgEKClVzZXJUaWNrZXQSCgoCSWQYASABKAUSDgoGVXNl",
            "cklkGAIgASgFEhAKCFRpY2tldElkGAMgASgFEg4KBlNlYXRObxgEIAEoBRIw",
            "CgZUaWNrZXQYBSABKAsyIC5UcmF2ZWxSZXNlcnZlQ0wucHJvdG9idWYuVGlj",
            "a2V0EiwKBFVzZXIYBiABKAsyHi5UcmF2ZWxSZXNlcnZlQ0wucHJvdG9idWYu",
            "VXNlcmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TravelReserveCL.Protobuf.Bus), global::TravelReserveCL.Protobuf.Bus.Parser, new[]{ "Id", "Name", "CompanyId", "Type", "Company", "BusType", "Trip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TravelReserveCL.Protobuf.BusStation), global::TravelReserveCL.Protobuf.BusStation.Parser, new[]{ "Id", "Name", "CityId", "Latitude", "Longtitude", "Default", "City", "RoutesFrom", "RoutesTo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TravelReserveCL.Protobuf.BusType), global::TravelReserveCL.Protobuf.BusType.Parser, new[]{ "Id", "Name", "Seats", "Bus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TravelReserveCL.Protobuf.City), global::TravelReserveCL.Protobuf.City.Parser, new[]{ "Id", "Name", "BusStation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TravelReserveCL.Protobuf.Company), global::TravelReserveCL.Protobuf.Company.Parser, new[]{ "Id", "Name", "Logo", "Bus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TravelReserveCL.Protobuf.Route), global::TravelReserveCL.Protobuf.Route.Parser, new[]{ "Id", "From", "To", "Distance", "BusStationFrom", "BusStationTo", "Trip", "UserPlan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TravelReserveCL.Protobuf.Ticket), global::TravelReserveCL.Protobuf.Ticket.Parser, new[]{ "Id", "TripId", "Price", "FromDate", "ToDate", "Trip", "UserTicket" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TravelReserveCL.Protobuf.Trip), global::TravelReserveCL.Protobuf.Trip.Parser, new[]{ "Id", "RouteId", "BusId", "AvailSeats", "Date", "Time", "ArrivalDate", "ArrivalTime", "Bus", "Route", "Ticket" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TravelReserveCL.Protobuf.User), global::TravelReserveCL.Protobuf.User.Parser, new[]{ "Id", "Email", "Password", "Username", "UserPlan", "UserTicket" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TravelReserveCL.Protobuf.UserPlan), global::TravelReserveCL.Protobuf.UserPlan.Parser, new[]{ "Id", "UserId", "RouteId", "FromDate", "ToDate", "Route", "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TravelReserveCL.Protobuf.UserTicket), global::TravelReserveCL.Protobuf.UserTicket.Parser, new[]{ "Id", "UserId", "TicketId", "SeatNo", "Ticket", "User" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Bus : pb::IMessage<Bus> {
    private static readonly pb::MessageParser<Bus> _parser = new pb::MessageParser<Bus>(() => new Bus());
    public static pb::MessageParser<Bus> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::TravelReserveCL.Protobuf.TravelReserveCLReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Bus() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Bus(Bus other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      companyId_ = other.companyId_;
      type_ = other.type_;
      Company = other.company_ != null ? other.Company.Clone() : null;
      BusType = other.busType_ != null ? other.BusType.Clone() : null;
      trip_ = other.trip_.Clone();
    }

    public Bus Clone() {
      return new Bus(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CompanyId" field.</summary>
    public const int CompanyIdFieldNumber = 3;
    private int companyId_;
    public int CompanyId {
      get { return companyId_; }
      set {
        companyId_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Company" field.</summary>
    public const int CompanyFieldNumber = 5;
    private global::TravelReserveCL.Protobuf.Company company_;
    public global::TravelReserveCL.Protobuf.Company Company {
      get { return company_; }
      set {
        company_ = value;
      }
    }

    /// <summary>Field number for the "BusType" field.</summary>
    public const int BusTypeFieldNumber = 6;
    private global::TravelReserveCL.Protobuf.BusType busType_;
    public global::TravelReserveCL.Protobuf.BusType BusType {
      get { return busType_; }
      set {
        busType_ = value;
      }
    }

    /// <summary>Field number for the "Trip" field.</summary>
    public const int TripFieldNumber = 7;
    private static readonly pb::FieldCodec<global::TravelReserveCL.Protobuf.Trip> _repeated_trip_codec
        = pb::FieldCodec.ForMessage(58, global::TravelReserveCL.Protobuf.Trip.Parser);
    private readonly pbc::RepeatedField<global::TravelReserveCL.Protobuf.Trip> trip_ = new pbc::RepeatedField<global::TravelReserveCL.Protobuf.Trip>();
    public pbc::RepeatedField<global::TravelReserveCL.Protobuf.Trip> Trip {
      get { return trip_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Bus);
    }

    public bool Equals(Bus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (CompanyId != other.CompanyId) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Company, other.Company)) return false;
      if (!object.Equals(BusType, other.BusType)) return false;
      if(!trip_.Equals(other.trip_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CompanyId != 0) hash ^= CompanyId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (company_ != null) hash ^= Company.GetHashCode();
      if (busType_ != null) hash ^= BusType.GetHashCode();
      hash ^= trip_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (CompanyId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CompanyId);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (company_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Company);
      }
      if (busType_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BusType);
      }
      trip_.WriteTo(output, _repeated_trip_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CompanyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompanyId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (company_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Company);
      }
      if (busType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BusType);
      }
      size += trip_.CalculateSize(_repeated_trip_codec);
      return size;
    }

    public void MergeFrom(Bus other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CompanyId != 0) {
        CompanyId = other.CompanyId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.company_ != null) {
        if (company_ == null) {
          company_ = new global::TravelReserveCL.Protobuf.Company();
        }
        Company.MergeFrom(other.Company);
      }
      if (other.busType_ != null) {
        if (busType_ == null) {
          busType_ = new global::TravelReserveCL.Protobuf.BusType();
        }
        BusType.MergeFrom(other.BusType);
      }
      trip_.Add(other.trip_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            CompanyId = input.ReadInt32();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 42: {
            if (company_ == null) {
              company_ = new global::TravelReserveCL.Protobuf.Company();
            }
            input.ReadMessage(company_);
            break;
          }
          case 50: {
            if (busType_ == null) {
              busType_ = new global::TravelReserveCL.Protobuf.BusType();
            }
            input.ReadMessage(busType_);
            break;
          }
          case 58: {
            trip_.AddEntriesFrom(input, _repeated_trip_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BusStation : pb::IMessage<BusStation> {
    private static readonly pb::MessageParser<BusStation> _parser = new pb::MessageParser<BusStation>(() => new BusStation());
    public static pb::MessageParser<BusStation> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::TravelReserveCL.Protobuf.TravelReserveCLReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BusStation() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BusStation(BusStation other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      cityId_ = other.cityId_;
      latitude_ = other.latitude_;
      longtitude_ = other.longtitude_;
      default_ = other.default_;
      City = other.city_ != null ? other.City.Clone() : null;
      routesFrom_ = other.routesFrom_.Clone();
      routesTo_ = other.routesTo_.Clone();
    }

    public BusStation Clone() {
      return new BusStation(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CityId" field.</summary>
    public const int CityIdFieldNumber = 3;
    private int cityId_;
    public int CityId {
      get { return cityId_; }
      set {
        cityId_ = value;
      }
    }

    /// <summary>Field number for the "Latitude" field.</summary>
    public const int LatitudeFieldNumber = 4;
    private double latitude_;
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "Longtitude" field.</summary>
    public const int LongtitudeFieldNumber = 5;
    private double longtitude_;
    public double Longtitude {
      get { return longtitude_; }
      set {
        longtitude_ = value;
      }
    }

    /// <summary>Field number for the "Default" field.</summary>
    public const int DefaultFieldNumber = 6;
    private bool default_;
    public bool Default {
      get { return default_; }
      set {
        default_ = value;
      }
    }

    /// <summary>Field number for the "City" field.</summary>
    public const int CityFieldNumber = 7;
    private global::TravelReserveCL.Protobuf.City city_;
    public global::TravelReserveCL.Protobuf.City City {
      get { return city_; }
      set {
        city_ = value;
      }
    }

    /// <summary>Field number for the "RoutesFrom" field.</summary>
    public const int RoutesFromFieldNumber = 8;
    private static readonly pb::FieldCodec<global::TravelReserveCL.Protobuf.Route> _repeated_routesFrom_codec
        = pb::FieldCodec.ForMessage(66, global::TravelReserveCL.Protobuf.Route.Parser);
    private readonly pbc::RepeatedField<global::TravelReserveCL.Protobuf.Route> routesFrom_ = new pbc::RepeatedField<global::TravelReserveCL.Protobuf.Route>();
    public pbc::RepeatedField<global::TravelReserveCL.Protobuf.Route> RoutesFrom {
      get { return routesFrom_; }
    }

    /// <summary>Field number for the "RoutesTo" field.</summary>
    public const int RoutesToFieldNumber = 9;
    private static readonly pb::FieldCodec<global::TravelReserveCL.Protobuf.Route> _repeated_routesTo_codec
        = pb::FieldCodec.ForMessage(74, global::TravelReserveCL.Protobuf.Route.Parser);
    private readonly pbc::RepeatedField<global::TravelReserveCL.Protobuf.Route> routesTo_ = new pbc::RepeatedField<global::TravelReserveCL.Protobuf.Route>();
    public pbc::RepeatedField<global::TravelReserveCL.Protobuf.Route> RoutesTo {
      get { return routesTo_; }
    }

    public override bool Equals(object other) {
      return Equals(other as BusStation);
    }

    public bool Equals(BusStation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (CityId != other.CityId) return false;
      if (Latitude != other.Latitude) return false;
      if (Longtitude != other.Longtitude) return false;
      if (Default != other.Default) return false;
      if (!object.Equals(City, other.City)) return false;
      if(!routesFrom_.Equals(other.routesFrom_)) return false;
      if(!routesTo_.Equals(other.routesTo_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CityId != 0) hash ^= CityId.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longtitude != 0D) hash ^= Longtitude.GetHashCode();
      if (Default != false) hash ^= Default.GetHashCode();
      if (city_ != null) hash ^= City.GetHashCode();
      hash ^= routesFrom_.GetHashCode();
      hash ^= routesTo_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (CityId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CityId);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Latitude);
      }
      if (Longtitude != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Longtitude);
      }
      if (Default != false) {
        output.WriteRawTag(48);
        output.WriteBool(Default);
      }
      if (city_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(City);
      }
      routesFrom_.WriteTo(output, _repeated_routesFrom_codec);
      routesTo_.WriteTo(output, _repeated_routesTo_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CityId);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longtitude != 0D) {
        size += 1 + 8;
      }
      if (Default != false) {
        size += 1 + 1;
      }
      if (city_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(City);
      }
      size += routesFrom_.CalculateSize(_repeated_routesFrom_codec);
      size += routesTo_.CalculateSize(_repeated_routesTo_codec);
      return size;
    }

    public void MergeFrom(BusStation other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CityId != 0) {
        CityId = other.CityId;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longtitude != 0D) {
        Longtitude = other.Longtitude;
      }
      if (other.Default != false) {
        Default = other.Default;
      }
      if (other.city_ != null) {
        if (city_ == null) {
          city_ = new global::TravelReserveCL.Protobuf.City();
        }
        City.MergeFrom(other.City);
      }
      routesFrom_.Add(other.routesFrom_);
      routesTo_.Add(other.routesTo_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            CityId = input.ReadInt32();
            break;
          }
          case 33: {
            Latitude = input.ReadDouble();
            break;
          }
          case 41: {
            Longtitude = input.ReadDouble();
            break;
          }
          case 48: {
            Default = input.ReadBool();
            break;
          }
          case 58: {
            if (city_ == null) {
              city_ = new global::TravelReserveCL.Protobuf.City();
            }
            input.ReadMessage(city_);
            break;
          }
          case 66: {
            routesFrom_.AddEntriesFrom(input, _repeated_routesFrom_codec);
            break;
          }
          case 74: {
            routesTo_.AddEntriesFrom(input, _repeated_routesTo_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BusType : pb::IMessage<BusType> {
    private static readonly pb::MessageParser<BusType> _parser = new pb::MessageParser<BusType>(() => new BusType());
    public static pb::MessageParser<BusType> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::TravelReserveCL.Protobuf.TravelReserveCLReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BusType() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BusType(BusType other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      seats_ = other.seats_;
      bus_ = other.bus_.Clone();
    }

    public BusType Clone() {
      return new BusType(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Seats" field.</summary>
    public const int SeatsFieldNumber = 3;
    private int seats_;
    public int Seats {
      get { return seats_; }
      set {
        seats_ = value;
      }
    }

    /// <summary>Field number for the "Bus" field.</summary>
    public const int BusFieldNumber = 4;
    private static readonly pb::FieldCodec<global::TravelReserveCL.Protobuf.Bus> _repeated_bus_codec
        = pb::FieldCodec.ForMessage(34, global::TravelReserveCL.Protobuf.Bus.Parser);
    private readonly pbc::RepeatedField<global::TravelReserveCL.Protobuf.Bus> bus_ = new pbc::RepeatedField<global::TravelReserveCL.Protobuf.Bus>();
    public pbc::RepeatedField<global::TravelReserveCL.Protobuf.Bus> Bus {
      get { return bus_; }
    }

    public override bool Equals(object other) {
      return Equals(other as BusType);
    }

    public bool Equals(BusType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Seats != other.Seats) return false;
      if(!bus_.Equals(other.bus_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Seats != 0) hash ^= Seats.GetHashCode();
      hash ^= bus_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Seats != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Seats);
      }
      bus_.WriteTo(output, _repeated_bus_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Seats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seats);
      }
      size += bus_.CalculateSize(_repeated_bus_codec);
      return size;
    }

    public void MergeFrom(BusType other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Seats != 0) {
        Seats = other.Seats;
      }
      bus_.Add(other.bus_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Seats = input.ReadInt32();
            break;
          }
          case 34: {
            bus_.AddEntriesFrom(input, _repeated_bus_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class City : pb::IMessage<City> {
    private static readonly pb::MessageParser<City> _parser = new pb::MessageParser<City>(() => new City());
    public static pb::MessageParser<City> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::TravelReserveCL.Protobuf.TravelReserveCLReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public City() {
      OnConstruction();
    }

    partial void OnConstruction();

    public City(City other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      busStation_ = other.busStation_.Clone();
    }

    public City Clone() {
      return new City(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BusStation" field.</summary>
    public const int BusStationFieldNumber = 3;
    private static readonly pb::FieldCodec<global::TravelReserveCL.Protobuf.BusStation> _repeated_busStation_codec
        = pb::FieldCodec.ForMessage(26, global::TravelReserveCL.Protobuf.BusStation.Parser);
    private readonly pbc::RepeatedField<global::TravelReserveCL.Protobuf.BusStation> busStation_ = new pbc::RepeatedField<global::TravelReserveCL.Protobuf.BusStation>();
    public pbc::RepeatedField<global::TravelReserveCL.Protobuf.BusStation> BusStation {
      get { return busStation_; }
    }

    public override bool Equals(object other) {
      return Equals(other as City);
    }

    public bool Equals(City other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!busStation_.Equals(other.busStation_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= busStation_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      busStation_.WriteTo(output, _repeated_busStation_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += busStation_.CalculateSize(_repeated_busStation_codec);
      return size;
    }

    public void MergeFrom(City other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      busStation_.Add(other.busStation_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            busStation_.AddEntriesFrom(input, _repeated_busStation_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Company : pb::IMessage<Company> {
    private static readonly pb::MessageParser<Company> _parser = new pb::MessageParser<Company>(() => new Company());
    public static pb::MessageParser<Company> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::TravelReserveCL.Protobuf.TravelReserveCLReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Company() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Company(Company other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      logo_ = other.logo_;
      bus_ = other.bus_.Clone();
    }

    public Company Clone() {
      return new Company(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logo" field.</summary>
    public const int LogoFieldNumber = 3;
    private pb::ByteString logo_ = pb::ByteString.Empty;
    public pb::ByteString Logo {
      get { return logo_; }
      set {
        logo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Bus" field.</summary>
    public const int BusFieldNumber = 4;
    private static readonly pb::FieldCodec<global::TravelReserveCL.Protobuf.Bus> _repeated_bus_codec
        = pb::FieldCodec.ForMessage(34, global::TravelReserveCL.Protobuf.Bus.Parser);
    private readonly pbc::RepeatedField<global::TravelReserveCL.Protobuf.Bus> bus_ = new pbc::RepeatedField<global::TravelReserveCL.Protobuf.Bus>();
    public pbc::RepeatedField<global::TravelReserveCL.Protobuf.Bus> Bus {
      get { return bus_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Company);
    }

    public bool Equals(Company other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Logo != other.Logo) return false;
      if(!bus_.Equals(other.bus_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Logo.Length != 0) hash ^= Logo.GetHashCode();
      hash ^= bus_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Logo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Logo);
      }
      bus_.WriteTo(output, _repeated_bus_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Logo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Logo);
      }
      size += bus_.CalculateSize(_repeated_bus_codec);
      return size;
    }

    public void MergeFrom(Company other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Logo.Length != 0) {
        Logo = other.Logo;
      }
      bus_.Add(other.bus_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Logo = input.ReadBytes();
            break;
          }
          case 34: {
            bus_.AddEntriesFrom(input, _repeated_bus_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Route : pb::IMessage<Route> {
    private static readonly pb::MessageParser<Route> _parser = new pb::MessageParser<Route>(() => new Route());
    public static pb::MessageParser<Route> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::TravelReserveCL.Protobuf.TravelReserveCLReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Route() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Route(Route other) : this() {
      id_ = other.id_;
      from_ = other.from_;
      to_ = other.to_;
      distance_ = other.distance_;
      BusStationFrom = other.busStationFrom_ != null ? other.BusStationFrom.Clone() : null;
      BusStationTo = other.busStationTo_ != null ? other.BusStationTo.Clone() : null;
      trip_ = other.trip_.Clone();
      userPlan_ = other.userPlan_.Clone();
    }

    public Route Clone() {
      return new Route(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "From" field.</summary>
    public const int FromFieldNumber = 2;
    private int from_;
    public int From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "To" field.</summary>
    public const int ToFieldNumber = 3;
    private int to_;
    public int To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "Distance" field.</summary>
    public const int DistanceFieldNumber = 4;
    private double distance_;
    public double Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    /// <summary>Field number for the "BusStationFrom" field.</summary>
    public const int BusStationFromFieldNumber = 5;
    private global::TravelReserveCL.Protobuf.BusStation busStationFrom_;
    public global::TravelReserveCL.Protobuf.BusStation BusStationFrom {
      get { return busStationFrom_; }
      set {
        busStationFrom_ = value;
      }
    }

    /// <summary>Field number for the "BusStationTo" field.</summary>
    public const int BusStationToFieldNumber = 6;
    private global::TravelReserveCL.Protobuf.BusStation busStationTo_;
    public global::TravelReserveCL.Protobuf.BusStation BusStationTo {
      get { return busStationTo_; }
      set {
        busStationTo_ = value;
      }
    }

    /// <summary>Field number for the "Trip" field.</summary>
    public const int TripFieldNumber = 7;
    private static readonly pb::FieldCodec<global::TravelReserveCL.Protobuf.Trip> _repeated_trip_codec
        = pb::FieldCodec.ForMessage(58, global::TravelReserveCL.Protobuf.Trip.Parser);
    private readonly pbc::RepeatedField<global::TravelReserveCL.Protobuf.Trip> trip_ = new pbc::RepeatedField<global::TravelReserveCL.Protobuf.Trip>();
    public pbc::RepeatedField<global::TravelReserveCL.Protobuf.Trip> Trip {
      get { return trip_; }
    }

    /// <summary>Field number for the "UserPlan" field.</summary>
    public const int UserPlanFieldNumber = 8;
    private static readonly pb::FieldCodec<global::TravelReserveCL.Protobuf.UserPlan> _repeated_userPlan_codec
        = pb::FieldCodec.ForMessage(66, global::TravelReserveCL.Protobuf.UserPlan.Parser);
    private readonly pbc::RepeatedField<global::TravelReserveCL.Protobuf.UserPlan> userPlan_ = new pbc::RepeatedField<global::TravelReserveCL.Protobuf.UserPlan>();
    public pbc::RepeatedField<global::TravelReserveCL.Protobuf.UserPlan> UserPlan {
      get { return userPlan_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Route);
    }

    public bool Equals(Route other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (Distance != other.Distance) return false;
      if (!object.Equals(BusStationFrom, other.BusStationFrom)) return false;
      if (!object.Equals(BusStationTo, other.BusStationTo)) return false;
      if(!trip_.Equals(other.trip_)) return false;
      if(!userPlan_.Equals(other.userPlan_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (From != 0) hash ^= From.GetHashCode();
      if (To != 0) hash ^= To.GetHashCode();
      if (Distance != 0D) hash ^= Distance.GetHashCode();
      if (busStationFrom_ != null) hash ^= BusStationFrom.GetHashCode();
      if (busStationTo_ != null) hash ^= BusStationTo.GetHashCode();
      hash ^= trip_.GetHashCode();
      hash ^= userPlan_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (From != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(From);
      }
      if (To != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(To);
      }
      if (Distance != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Distance);
      }
      if (busStationFrom_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BusStationFrom);
      }
      if (busStationTo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BusStationTo);
      }
      trip_.WriteTo(output, _repeated_trip_codec);
      userPlan_.WriteTo(output, _repeated_userPlan_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
      }
      if (To != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(To);
      }
      if (Distance != 0D) {
        size += 1 + 8;
      }
      if (busStationFrom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BusStationFrom);
      }
      if (busStationTo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BusStationTo);
      }
      size += trip_.CalculateSize(_repeated_trip_codec);
      size += userPlan_.CalculateSize(_repeated_userPlan_codec);
      return size;
    }

    public void MergeFrom(Route other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.To != 0) {
        To = other.To;
      }
      if (other.Distance != 0D) {
        Distance = other.Distance;
      }
      if (other.busStationFrom_ != null) {
        if (busStationFrom_ == null) {
          busStationFrom_ = new global::TravelReserveCL.Protobuf.BusStation();
        }
        BusStationFrom.MergeFrom(other.BusStationFrom);
      }
      if (other.busStationTo_ != null) {
        if (busStationTo_ == null) {
          busStationTo_ = new global::TravelReserveCL.Protobuf.BusStation();
        }
        BusStationTo.MergeFrom(other.BusStationTo);
      }
      trip_.Add(other.trip_);
      userPlan_.Add(other.userPlan_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            From = input.ReadInt32();
            break;
          }
          case 24: {
            To = input.ReadInt32();
            break;
          }
          case 33: {
            Distance = input.ReadDouble();
            break;
          }
          case 42: {
            if (busStationFrom_ == null) {
              busStationFrom_ = new global::TravelReserveCL.Protobuf.BusStation();
            }
            input.ReadMessage(busStationFrom_);
            break;
          }
          case 50: {
            if (busStationTo_ == null) {
              busStationTo_ = new global::TravelReserveCL.Protobuf.BusStation();
            }
            input.ReadMessage(busStationTo_);
            break;
          }
          case 58: {
            trip_.AddEntriesFrom(input, _repeated_trip_codec);
            break;
          }
          case 66: {
            userPlan_.AddEntriesFrom(input, _repeated_userPlan_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Ticket : pb::IMessage<Ticket> {
    private static readonly pb::MessageParser<Ticket> _parser = new pb::MessageParser<Ticket>(() => new Ticket());
    public static pb::MessageParser<Ticket> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::TravelReserveCL.Protobuf.TravelReserveCLReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Ticket() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Ticket(Ticket other) : this() {
      id_ = other.id_;
      tripId_ = other.tripId_;
      price_ = other.price_;
      fromDate_ = other.fromDate_;
      toDate_ = other.toDate_;
      Trip = other.trip_ != null ? other.Trip.Clone() : null;
      userTicket_ = other.userTicket_.Clone();
    }

    public Ticket Clone() {
      return new Ticket(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "TripId" field.</summary>
    public const int TripIdFieldNumber = 2;
    private int tripId_;
    public int TripId {
      get { return tripId_; }
      set {
        tripId_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 3;
    private double price_;
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "FromDate" field.</summary>
    public const int FromDateFieldNumber = 4;
    private long fromDate_;
    public long FromDate {
      get { return fromDate_; }
      set {
        fromDate_ = value;
      }
    }

    /// <summary>Field number for the "ToDate" field.</summary>
    public const int ToDateFieldNumber = 5;
    private long toDate_;
    /// <summary>
    /// nullable
    /// </summary>
    public long ToDate {
      get { return toDate_; }
      set {
        toDate_ = value;
      }
    }

    /// <summary>Field number for the "Trip" field.</summary>
    public const int TripFieldNumber = 6;
    private global::TravelReserveCL.Protobuf.Trip trip_;
    public global::TravelReserveCL.Protobuf.Trip Trip {
      get { return trip_; }
      set {
        trip_ = value;
      }
    }

    /// <summary>Field number for the "UserTicket" field.</summary>
    public const int UserTicketFieldNumber = 7;
    private static readonly pb::FieldCodec<global::TravelReserveCL.Protobuf.UserTicket> _repeated_userTicket_codec
        = pb::FieldCodec.ForMessage(58, global::TravelReserveCL.Protobuf.UserTicket.Parser);
    private readonly pbc::RepeatedField<global::TravelReserveCL.Protobuf.UserTicket> userTicket_ = new pbc::RepeatedField<global::TravelReserveCL.Protobuf.UserTicket>();
    public pbc::RepeatedField<global::TravelReserveCL.Protobuf.UserTicket> UserTicket {
      get { return userTicket_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Ticket);
    }

    public bool Equals(Ticket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TripId != other.TripId) return false;
      if (Price != other.Price) return false;
      if (FromDate != other.FromDate) return false;
      if (ToDate != other.ToDate) return false;
      if (!object.Equals(Trip, other.Trip)) return false;
      if(!userTicket_.Equals(other.userTicket_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (TripId != 0) hash ^= TripId.GetHashCode();
      if (Price != 0D) hash ^= Price.GetHashCode();
      if (FromDate != 0L) hash ^= FromDate.GetHashCode();
      if (ToDate != 0L) hash ^= ToDate.GetHashCode();
      if (trip_ != null) hash ^= Trip.GetHashCode();
      hash ^= userTicket_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (TripId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TripId);
      }
      if (Price != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Price);
      }
      if (FromDate != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FromDate);
      }
      if (ToDate != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ToDate);
      }
      if (trip_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Trip);
      }
      userTicket_.WriteTo(output, _repeated_userTicket_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (TripId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TripId);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (FromDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromDate);
      }
      if (ToDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToDate);
      }
      if (trip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trip);
      }
      size += userTicket_.CalculateSize(_repeated_userTicket_codec);
      return size;
    }

    public void MergeFrom(Ticket other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.TripId != 0) {
        TripId = other.TripId;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.FromDate != 0L) {
        FromDate = other.FromDate;
      }
      if (other.ToDate != 0L) {
        ToDate = other.ToDate;
      }
      if (other.trip_ != null) {
        if (trip_ == null) {
          trip_ = new global::TravelReserveCL.Protobuf.Trip();
        }
        Trip.MergeFrom(other.Trip);
      }
      userTicket_.Add(other.userTicket_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            TripId = input.ReadInt32();
            break;
          }
          case 25: {
            Price = input.ReadDouble();
            break;
          }
          case 32: {
            FromDate = input.ReadInt64();
            break;
          }
          case 40: {
            ToDate = input.ReadInt64();
            break;
          }
          case 50: {
            if (trip_ == null) {
              trip_ = new global::TravelReserveCL.Protobuf.Trip();
            }
            input.ReadMessage(trip_);
            break;
          }
          case 58: {
            userTicket_.AddEntriesFrom(input, _repeated_userTicket_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Trip : pb::IMessage<Trip> {
    private static readonly pb::MessageParser<Trip> _parser = new pb::MessageParser<Trip>(() => new Trip());
    public static pb::MessageParser<Trip> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::TravelReserveCL.Protobuf.TravelReserveCLReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Trip() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Trip(Trip other) : this() {
      id_ = other.id_;
      routeId_ = other.routeId_;
      busId_ = other.busId_;
      availSeats_ = other.availSeats_;
      date_ = other.date_;
      time_ = other.time_;
      arrivalDate_ = other.arrivalDate_;
      arrivalTime_ = other.arrivalTime_;
      Bus = other.bus_ != null ? other.Bus.Clone() : null;
      Route = other.route_ != null ? other.Route.Clone() : null;
      ticket_ = other.ticket_.Clone();
    }

    public Trip Clone() {
      return new Trip(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "RouteId" field.</summary>
    public const int RouteIdFieldNumber = 2;
    private int routeId_;
    public int RouteId {
      get { return routeId_; }
      set {
        routeId_ = value;
      }
    }

    /// <summary>Field number for the "BusId" field.</summary>
    public const int BusIdFieldNumber = 3;
    private int busId_;
    public int BusId {
      get { return busId_; }
      set {
        busId_ = value;
      }
    }

    /// <summary>Field number for the "AvailSeats" field.</summary>
    public const int AvailSeatsFieldNumber = 4;
    private int availSeats_;
    public int AvailSeats {
      get { return availSeats_; }
      set {
        availSeats_ = value;
      }
    }

    /// <summary>Field number for the "Date" field.</summary>
    public const int DateFieldNumber = 5;
    private int date_;
    public int Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 6;
    private int time_;
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "ArrivalDate" field.</summary>
    public const int ArrivalDateFieldNumber = 7;
    private int arrivalDate_;
    public int ArrivalDate {
      get { return arrivalDate_; }
      set {
        arrivalDate_ = value;
      }
    }

    /// <summary>Field number for the "ArrivalTime" field.</summary>
    public const int ArrivalTimeFieldNumber = 8;
    private int arrivalTime_;
    public int ArrivalTime {
      get { return arrivalTime_; }
      set {
        arrivalTime_ = value;
      }
    }

    /// <summary>Field number for the "Bus" field.</summary>
    public const int BusFieldNumber = 9;
    private global::TravelReserveCL.Protobuf.Bus bus_;
    public global::TravelReserveCL.Protobuf.Bus Bus {
      get { return bus_; }
      set {
        bus_ = value;
      }
    }

    /// <summary>Field number for the "Route" field.</summary>
    public const int RouteFieldNumber = 10;
    private global::TravelReserveCL.Protobuf.Route route_;
    public global::TravelReserveCL.Protobuf.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    /// <summary>Field number for the "Ticket" field.</summary>
    public const int TicketFieldNumber = 11;
    private static readonly pb::FieldCodec<global::TravelReserveCL.Protobuf.Ticket> _repeated_ticket_codec
        = pb::FieldCodec.ForMessage(90, global::TravelReserveCL.Protobuf.Ticket.Parser);
    private readonly pbc::RepeatedField<global::TravelReserveCL.Protobuf.Ticket> ticket_ = new pbc::RepeatedField<global::TravelReserveCL.Protobuf.Ticket>();
    public pbc::RepeatedField<global::TravelReserveCL.Protobuf.Ticket> Ticket {
      get { return ticket_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Trip);
    }

    public bool Equals(Trip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (RouteId != other.RouteId) return false;
      if (BusId != other.BusId) return false;
      if (AvailSeats != other.AvailSeats) return false;
      if (Date != other.Date) return false;
      if (Time != other.Time) return false;
      if (ArrivalDate != other.ArrivalDate) return false;
      if (ArrivalTime != other.ArrivalTime) return false;
      if (!object.Equals(Bus, other.Bus)) return false;
      if (!object.Equals(Route, other.Route)) return false;
      if(!ticket_.Equals(other.ticket_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (RouteId != 0) hash ^= RouteId.GetHashCode();
      if (BusId != 0) hash ^= BusId.GetHashCode();
      if (AvailSeats != 0) hash ^= AvailSeats.GetHashCode();
      if (Date != 0) hash ^= Date.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (ArrivalDate != 0) hash ^= ArrivalDate.GetHashCode();
      if (ArrivalTime != 0) hash ^= ArrivalTime.GetHashCode();
      if (bus_ != null) hash ^= Bus.GetHashCode();
      if (route_ != null) hash ^= Route.GetHashCode();
      hash ^= ticket_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (RouteId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RouteId);
      }
      if (BusId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BusId);
      }
      if (AvailSeats != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AvailSeats);
      }
      if (Date != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Date);
      }
      if (Time != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Time);
      }
      if (ArrivalDate != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ArrivalDate);
      }
      if (ArrivalTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ArrivalTime);
      }
      if (bus_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Bus);
      }
      if (route_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Route);
      }
      ticket_.WriteTo(output, _repeated_ticket_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (RouteId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RouteId);
      }
      if (BusId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BusId);
      }
      if (AvailSeats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvailSeats);
      }
      if (Date != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Date);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (ArrivalDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArrivalDate);
      }
      if (ArrivalTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArrivalTime);
      }
      if (bus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bus);
      }
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      size += ticket_.CalculateSize(_repeated_ticket_codec);
      return size;
    }

    public void MergeFrom(Trip other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.RouteId != 0) {
        RouteId = other.RouteId;
      }
      if (other.BusId != 0) {
        BusId = other.BusId;
      }
      if (other.AvailSeats != 0) {
        AvailSeats = other.AvailSeats;
      }
      if (other.Date != 0) {
        Date = other.Date;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.ArrivalDate != 0) {
        ArrivalDate = other.ArrivalDate;
      }
      if (other.ArrivalTime != 0) {
        ArrivalTime = other.ArrivalTime;
      }
      if (other.bus_ != null) {
        if (bus_ == null) {
          bus_ = new global::TravelReserveCL.Protobuf.Bus();
        }
        Bus.MergeFrom(other.Bus);
      }
      if (other.route_ != null) {
        if (route_ == null) {
          route_ = new global::TravelReserveCL.Protobuf.Route();
        }
        Route.MergeFrom(other.Route);
      }
      ticket_.Add(other.ticket_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            RouteId = input.ReadInt32();
            break;
          }
          case 24: {
            BusId = input.ReadInt32();
            break;
          }
          case 32: {
            AvailSeats = input.ReadInt32();
            break;
          }
          case 40: {
            Date = input.ReadInt32();
            break;
          }
          case 48: {
            Time = input.ReadInt32();
            break;
          }
          case 56: {
            ArrivalDate = input.ReadInt32();
            break;
          }
          case 64: {
            ArrivalTime = input.ReadInt32();
            break;
          }
          case 74: {
            if (bus_ == null) {
              bus_ = new global::TravelReserveCL.Protobuf.Bus();
            }
            input.ReadMessage(bus_);
            break;
          }
          case 82: {
            if (route_ == null) {
              route_ = new global::TravelReserveCL.Protobuf.Route();
            }
            input.ReadMessage(route_);
            break;
          }
          case 90: {
            ticket_.AddEntriesFrom(input, _repeated_ticket_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::TravelReserveCL.Protobuf.TravelReserveCLReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    public User(User other) : this() {
      id_ = other.id_;
      email_ = other.email_;
      password_ = other.password_;
      username_ = other.username_;
      userPlan_ = other.userPlan_.Clone();
      userTicket_ = other.userTicket_.Clone();
    }

    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Email" field.</summary>
    public const int EmailFieldNumber = 2;
    private string email_ = "";
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private pb::ByteString password_ = pb::ByteString.Empty;
    public pb::ByteString Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Username" field.</summary>
    public const int UsernameFieldNumber = 4;
    private string username_ = "";
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserPlan" field.</summary>
    public const int UserPlanFieldNumber = 5;
    private static readonly pb::FieldCodec<global::TravelReserveCL.Protobuf.UserPlan> _repeated_userPlan_codec
        = pb::FieldCodec.ForMessage(42, global::TravelReserveCL.Protobuf.UserPlan.Parser);
    private readonly pbc::RepeatedField<global::TravelReserveCL.Protobuf.UserPlan> userPlan_ = new pbc::RepeatedField<global::TravelReserveCL.Protobuf.UserPlan>();
    public pbc::RepeatedField<global::TravelReserveCL.Protobuf.UserPlan> UserPlan {
      get { return userPlan_; }
    }

    /// <summary>Field number for the "UserTicket" field.</summary>
    public const int UserTicketFieldNumber = 6;
    private static readonly pb::FieldCodec<global::TravelReserveCL.Protobuf.UserTicket> _repeated_userTicket_codec
        = pb::FieldCodec.ForMessage(50, global::TravelReserveCL.Protobuf.UserTicket.Parser);
    private readonly pbc::RepeatedField<global::TravelReserveCL.Protobuf.UserTicket> userTicket_ = new pbc::RepeatedField<global::TravelReserveCL.Protobuf.UserTicket>();
    public pbc::RepeatedField<global::TravelReserveCL.Protobuf.UserTicket> UserTicket {
      get { return userTicket_; }
    }

    public override bool Equals(object other) {
      return Equals(other as User);
    }

    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Email != other.Email) return false;
      if (Password != other.Password) return false;
      if (Username != other.Username) return false;
      if(!userPlan_.Equals(other.userPlan_)) return false;
      if(!userTicket_.Equals(other.userTicket_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      hash ^= userPlan_.GetHashCode();
      hash ^= userTicket_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Password);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Username);
      }
      userPlan_.WriteTo(output, _repeated_userPlan_codec);
      userTicket_.WriteTo(output, _repeated_userTicket_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      size += userPlan_.CalculateSize(_repeated_userPlan_codec);
      size += userTicket_.CalculateSize(_repeated_userTicket_codec);
      return size;
    }

    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      userPlan_.Add(other.userPlan_);
      userTicket_.Add(other.userTicket_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadBytes();
            break;
          }
          case 34: {
            Username = input.ReadString();
            break;
          }
          case 42: {
            userPlan_.AddEntriesFrom(input, _repeated_userPlan_codec);
            break;
          }
          case 50: {
            userTicket_.AddEntriesFrom(input, _repeated_userTicket_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UserPlan : pb::IMessage<UserPlan> {
    private static readonly pb::MessageParser<UserPlan> _parser = new pb::MessageParser<UserPlan>(() => new UserPlan());
    public static pb::MessageParser<UserPlan> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::TravelReserveCL.Protobuf.TravelReserveCLReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UserPlan() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UserPlan(UserPlan other) : this() {
      id_ = other.id_;
      userId_ = other.userId_;
      routeId_ = other.routeId_;
      fromDate_ = other.fromDate_;
      toDate_ = other.toDate_;
      Route = other.route_ != null ? other.Route.Clone() : null;
      User = other.user_ != null ? other.User.Clone() : null;
    }

    public UserPlan Clone() {
      return new UserPlan(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private int userId_;
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "RouteId" field.</summary>
    public const int RouteIdFieldNumber = 3;
    private int routeId_;
    public int RouteId {
      get { return routeId_; }
      set {
        routeId_ = value;
      }
    }

    /// <summary>Field number for the "FromDate" field.</summary>
    public const int FromDateFieldNumber = 4;
    private long fromDate_;
    public long FromDate {
      get { return fromDate_; }
      set {
        fromDate_ = value;
      }
    }

    /// <summary>Field number for the "ToDate" field.</summary>
    public const int ToDateFieldNumber = 5;
    private long toDate_;
    public long ToDate {
      get { return toDate_; }
      set {
        toDate_ = value;
      }
    }

    /// <summary>Field number for the "Route" field.</summary>
    public const int RouteFieldNumber = 6;
    private global::TravelReserveCL.Protobuf.Route route_;
    public global::TravelReserveCL.Protobuf.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    /// <summary>Field number for the "User" field.</summary>
    public const int UserFieldNumber = 7;
    private global::TravelReserveCL.Protobuf.User user_;
    public global::TravelReserveCL.Protobuf.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UserPlan);
    }

    public bool Equals(UserPlan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserId != other.UserId) return false;
      if (RouteId != other.RouteId) return false;
      if (FromDate != other.FromDate) return false;
      if (ToDate != other.ToDate) return false;
      if (!object.Equals(Route, other.Route)) return false;
      if (!object.Equals(User, other.User)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (RouteId != 0) hash ^= RouteId.GetHashCode();
      if (FromDate != 0L) hash ^= FromDate.GetHashCode();
      if (ToDate != 0L) hash ^= ToDate.GetHashCode();
      if (route_ != null) hash ^= Route.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (RouteId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RouteId);
      }
      if (FromDate != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FromDate);
      }
      if (ToDate != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ToDate);
      }
      if (route_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Route);
      }
      if (user_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(User);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (RouteId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RouteId);
      }
      if (FromDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromDate);
      }
      if (ToDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToDate);
      }
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      return size;
    }

    public void MergeFrom(UserPlan other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.RouteId != 0) {
        RouteId = other.RouteId;
      }
      if (other.FromDate != 0L) {
        FromDate = other.FromDate;
      }
      if (other.ToDate != 0L) {
        ToDate = other.ToDate;
      }
      if (other.route_ != null) {
        if (route_ == null) {
          route_ = new global::TravelReserveCL.Protobuf.Route();
        }
        Route.MergeFrom(other.Route);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::TravelReserveCL.Protobuf.User();
        }
        User.MergeFrom(other.User);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 24: {
            RouteId = input.ReadInt32();
            break;
          }
          case 32: {
            FromDate = input.ReadInt64();
            break;
          }
          case 40: {
            ToDate = input.ReadInt64();
            break;
          }
          case 50: {
            if (route_ == null) {
              route_ = new global::TravelReserveCL.Protobuf.Route();
            }
            input.ReadMessage(route_);
            break;
          }
          case 58: {
            if (user_ == null) {
              user_ = new global::TravelReserveCL.Protobuf.User();
            }
            input.ReadMessage(user_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UserTicket : pb::IMessage<UserTicket> {
    private static readonly pb::MessageParser<UserTicket> _parser = new pb::MessageParser<UserTicket>(() => new UserTicket());
    public static pb::MessageParser<UserTicket> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::TravelReserveCL.Protobuf.TravelReserveCLReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UserTicket() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UserTicket(UserTicket other) : this() {
      id_ = other.id_;
      userId_ = other.userId_;
      ticketId_ = other.ticketId_;
      seatNo_ = other.seatNo_;
      Ticket = other.ticket_ != null ? other.Ticket.Clone() : null;
      User = other.user_ != null ? other.User.Clone() : null;
    }

    public UserTicket Clone() {
      return new UserTicket(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private int userId_;
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "TicketId" field.</summary>
    public const int TicketIdFieldNumber = 3;
    private int ticketId_;
    public int TicketId {
      get { return ticketId_; }
      set {
        ticketId_ = value;
      }
    }

    /// <summary>Field number for the "SeatNo" field.</summary>
    public const int SeatNoFieldNumber = 4;
    private int seatNo_;
    public int SeatNo {
      get { return seatNo_; }
      set {
        seatNo_ = value;
      }
    }

    /// <summary>Field number for the "Ticket" field.</summary>
    public const int TicketFieldNumber = 5;
    private global::TravelReserveCL.Protobuf.Ticket ticket_;
    public global::TravelReserveCL.Protobuf.Ticket Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    /// <summary>Field number for the "User" field.</summary>
    public const int UserFieldNumber = 6;
    private global::TravelReserveCL.Protobuf.User user_;
    public global::TravelReserveCL.Protobuf.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UserTicket);
    }

    public bool Equals(UserTicket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserId != other.UserId) return false;
      if (TicketId != other.TicketId) return false;
      if (SeatNo != other.SeatNo) return false;
      if (!object.Equals(Ticket, other.Ticket)) return false;
      if (!object.Equals(User, other.User)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (TicketId != 0) hash ^= TicketId.GetHashCode();
      if (SeatNo != 0) hash ^= SeatNo.GetHashCode();
      if (ticket_ != null) hash ^= Ticket.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (TicketId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TicketId);
      }
      if (SeatNo != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SeatNo);
      }
      if (ticket_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Ticket);
      }
      if (user_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(User);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (TicketId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TicketId);
      }
      if (SeatNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNo);
      }
      if (ticket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      return size;
    }

    public void MergeFrom(UserTicket other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.TicketId != 0) {
        TicketId = other.TicketId;
      }
      if (other.SeatNo != 0) {
        SeatNo = other.SeatNo;
      }
      if (other.ticket_ != null) {
        if (ticket_ == null) {
          ticket_ = new global::TravelReserveCL.Protobuf.Ticket();
        }
        Ticket.MergeFrom(other.Ticket);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::TravelReserveCL.Protobuf.User();
        }
        User.MergeFrom(other.User);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 24: {
            TicketId = input.ReadInt32();
            break;
          }
          case 32: {
            SeatNo = input.ReadInt32();
            break;
          }
          case 42: {
            if (ticket_ == null) {
              ticket_ = new global::TravelReserveCL.Protobuf.Ticket();
            }
            input.ReadMessage(ticket_);
            break;
          }
          case 50: {
            if (user_ == null) {
              user_ = new global::TravelReserveCL.Protobuf.User();
            }
            input.ReadMessage(user_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
